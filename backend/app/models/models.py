from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, DateTime

from sqlalchemy.orm import relationship

from datetime import datetime

from .db import Base


# CREATE TABLE "Users" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "email" varchar(50) NOT NULL,
#   "password" varchar(100) NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class Users(Base):
    __tablename__ = "Users"

    id = Column(Integer, primary_key=True)
    email = Column(String(50), unique=True, nullable=False)
    password = Column(String(50), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)
# CREATE TABLE "Roles" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "title" varchar(20) NOT NULL,
#   "juridical" boolean DEFAULT false,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class Roles(Base):
    __tablename__ = "Roles"

    id = Column(Integer, primary_key=True)
    title = Column(String(20), nullable=False)
    juridical = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)
# CREATE TABLE "UsersRoles" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "user_id" int NOT NULL,
#   "role_id" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class UsersRoles(Base):
    __tablename__ = "UsersRoles"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('Users.id'), nullable=False)
    role_id = Column(Integer, ForeignKey('Roles.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    user = relationship('Users', backref='users_roles')
    role = relationship('Roles', backref='users_roles')
# CREATE TABLE "UsersInfo" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "user_id" int NOT NULL,
#   "first_name" varchar(20) NOT NULL,
#   "second_name" varchar(20) NOT NULL,
#   "surname" varchar(20) NOT NULL,
#   "phone" varchar(15) NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
# ForeignKey('Users.id')
class UsersInfo(Base):
    __tablename__ = "UsersInfo"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('Users.id'), nullable=False)
    first_name = Column(String(20), nullable=False)
    second_name = Column(String(20), nullable=False)
    surname = Column(String(20))
    phone = Column(String(20), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    user = relationship('Users', backref='users_info')
# CREATE TABLE "JuridicalUsers" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "user_id" int NOT NULL,
#   "position" varchar(20) NOT NULL,
#   "title" varchar(100) NOT NULL,
#   "inn" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class JuridicalUsers(Base):
    __tablename__ = "JuridicalUsers"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('Users.id'), nullable=False)
    position = Column(String(20), nullable=False)
    title = Column(String(100), nullable=False)
    inn = Column(String(20), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    user = relationship('Users', backref='juridical_users')
# CREATE TABLE "TenantUsers" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "user_id" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class TenantUsers(Base):
    __tablename__ = "TenantUsers"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('Users.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    user = relationship('Users', backref='tenant_users')
# CREATE TABLE "LandlordUsers" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "user_id" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class LandlordUsers(Base):
    __tablename__ = "LandlordUsers"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('Users.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    user = relationship('Users', backref='landlord_users')
# CREATE TABLE "AdminUsers" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "user_id" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class AdminUsers(Base):
    __tablename__ = "AdminUsers"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('Users.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    user = relationship('Users', backref='admin_users')
# CREATE TABLE "Industry" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "title" varchar(50) NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class Industry(Base):
    __tablename__ = "Industry"

    id = Column(Integer, primary_key=True)
    title = Column(String(50), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)
# CREATE TABLE "Photos" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "src" varchar(50) NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class Photos(Base):
    __tablename__ = "Photos"

    id = Column(Integer, primary_key=True)
    src = Column(String(200), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)
# CREATE TABLE "Metro" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "title" varchar(30) NOT NULL,
#   "color" varchar(10) NOT NULL,
#   "branch" varchar(20) NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class Metro(Base):
    __tablename__ = "Metro"

    id = Column(Integer, primary_key=True)
    title = Column(String(30), nullable=False)
    color = Column(String(10), nullable=False)
    branch = Column(String(20), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)
# CREATE TABLE "Equipments" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "title" varchar(40) NOT NULL,
#   "price" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class Equipments(Base):
    __tablename__ = "Equipments"

    id = Column(Integer, primary_key=True)
    title = Column(String(40), nullable=False)
    price = Column(Integer, nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)
# CREATE TABLE "Accessibilities" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "title" varchar(255) NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class Accessibilities(Base):
    __tablename__ = "Accessibilities"

    id = Column(Integer, primary_key=True)
    title = Column(String(255), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)
# CREATE TABLE "Facilities" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "title" varchar(255) NOT NULL,
#   "price" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class Facilities(Base):
    __tablename__ = "Facilities"

    id = Column(Integer, primary_key=True)
    title = Column(String(255), nullable=False)
    price = Column(Integer, nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)
# CREATE TABLE "Platforms" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "title" varchar(50) NOT NULL,
#   "description" varchar(255) NOT NULL,
#   "capacity" int NOT NULL,
#   "verified" boolean NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class Platforms(Base):
    __tablename__ = "Platforms"

    id = Column(Integer, primary_key=True)
    title = Column(String(50), nullable=False)
    description = Column(String(255), nullable=False)
    capacity = Column(Integer, nullable=False)
    verified = Column(Boolean)
    area = Column(Integer, nullable=False)
    phone = Column(String(20), nullable=False)
    address = Column(String(255), nullable=False)
    landlord_id = Column(Integer, ForeignKey('LandlordUsers.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    landlord_users = relationship('LandlordUsers', backref='platforms')
# CREATE TABLE "PlatformsMetro" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "platform_id" int NOT NULL,
#   "metro_id" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class PlatformsMetro(Base):
    __tablename__ = "PlatformsMetro"

    id = Column(Integer, primary_key=True)
    platform_id = Column(Integer, ForeignKey('Platforms.id'), nullable=False)
    metro_id = Column(Integer, ForeignKey('Metro.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    platforms = relationship('Platforms', backref='platforms_metro')
    metro = relationship('Metro', backref='platforms_metro')
# CREATE TABLE "PlatformsEquipments" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "platform_id" int NOT NULL,
#   "equipment_id" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class PlatformsEquipments(Base):
    __tablename__ = "PlatformsEquipments"

    id = Column(Integer, primary_key=True)
    platform_id = Column(Integer, ForeignKey('Platforms.id'), nullable=False)
    equipment_id = Column(Integer, ForeignKey('Equipments.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    platforms = relationship('Platforms', backref='platforms_equipments')
    equipments = relationship('Equipments', backref='platforms_equipments')
# CREATE TABLE "PlatformsIndustry" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "platform_id" int NOT NULL,
#   "industry_id" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class PlatformsIndustry(Base):
    __tablename__ = "PlatformsIndustry"

    id = Column(Integer, primary_key=True)
    platform_id = Column(Integer, ForeignKey('Platforms.id'), nullable=False)
    industry_id = Column(Integer, ForeignKey('Industry.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    platforms = relationship('Platforms', backref='platforms_industry')
    industry = relationship('Industry', backref='platforms_industry')
# CREATE TABLE "PlatformsPhotos" (
#   "id" int NOT NULL,
#   "platform_id" int NOT NULL,
#   "photo_id" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class PlatformsPhotos(Base):
    __tablename__ = "PlatformsPhotos"

    id = Column(Integer, primary_key=True)
    platform_id = Column(Integer, ForeignKey('Platforms.id'), nullable=False)
    photo_id = Column(Integer, ForeignKey('Photos.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    platforms = relationship('Platforms', backref='platforms_photos')
    photos = relationship('Photos', backref='platforms_photos')
# CREATE TABLE "PlatformsAccessibilities" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "platform_id" int NOT NULL,
#   "accessibility_id" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class PlatformsAccessibilities(Base):
    __tablename__ = "PlatformsAccessibilities"

    id = Column(Integer, primary_key=True)
    platform_id = Column(Integer, ForeignKey('Platforms.id'), nullable=False)
    accessibility_id = Column(Integer, ForeignKey('Accessibilities.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    platforms = relationship('Platforms', backref='platforms_accessibilities')
    accesibilities = relationship('Accessibilities', backref='platforms_accessibilities')
# CREATE TABLE "PlatformsFacilities" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "platform_id" int NOT NULL,
#   "facility_id" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class PlatformsFacilities(Base):
    __tablename__ = "PlatformsFacilities"

    id = Column(Integer, primary_key=True)
    platform_id = Column(Integer, ForeignKey('Platforms.id'), nullable=False)
    facility_id = Column(Integer, ForeignKey('Facilities.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    platforms = relationship('Platforms', backref='platforms_facilities')
    facilities = relationship('Facilities', backref='platforms_facilities')
# CREATE TABLE "PlatformsWorkingHours" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "platform_id" int NOT NULL,
#   "from_time" timestamp NOT NULL,
#   "to_time" timestamp NOT NULL,
#   "time_slot" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class PlatformsWorkingHours(Base):
    __tablename__ = "PlatformsWorkingHours"

    id = Column(Integer, primary_key=True)
    platform_id = Column(Integer, ForeignKey('Platforms.id'), nullable=False)
    from_time = Column(DateTime, nullable=False)
    to_time = Column(DateTime, nullable=False)
    time_slot = Column(Integer, nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    platforms = relationship('Platforms', backref='platforms_working_hours')
# CREATE TABLE "PlatformsBusySlots" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "platform_id" int NOT NULL,
#   "from_time" timestamp NOT NULL,
#   "to_time" timestamp NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class PlatformsBusySlots(Base):
    __tablename__ = "PlatformsBusySlots"

    id = Column(Integer, primary_key=True)
    platform_id = Column(Integer, ForeignKey('Platforms.id'), nullable=False)
    from_time = Column(DateTime, nullable=False)
    to_time = Column(DateTime, nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    platforms = relationship('Platforms', backref='platforms_busy_slots')
# CREATE TABLE "Bookings" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "tenant_id" int NOT NULL,
#   "landlord_id" int NOT NULL,
#   "plaform_id" int NOT NULL,
#   "time_slot_id" int NOT NULL,
#   "payed" boolean NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class Bookings(Base):
    __tablename__ = "Bookings"

    id = Column(Integer, primary_key=True)
    tenant_id = Column(Integer, ForeignKey('TenantUsers.id'), nullable=False)
    landlord_id = Column(Integer, ForeignKey('LandlordUsers.id'), nullable=False)
    platform_id = Column(Integer, ForeignKey('Platforms.id'), nullable=False)
    time_slot_id = Column(Integer, ForeignKey('PlatformsBusySlots.id'), nullable=False)
    paid = Column(Boolean, nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    tenants = relationship('TenantUsers', backref='bookings')
    landlords = relationship('LandlordUsers', backref='bookings')
    platforms = relationship('Platforms', backref='bookings')
    time_slots = relationship('PlatformsBusySlots', backref='bookings')


# CREATE TABLE "Contracts" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "src" varchar(50) NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class Contracts(Base):
    __tablename__ = "Contracts"

    id = Column(Integer, primary_key=True)
    src = Column(String(50), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)
# CREATE TABLE "BookingContracts" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "platform_id" int NOT NULL,
#   "contract_id" int NOT NULL,
#   "booking_id" int NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class BookingContracts(Base):
    __tablename__ = "BookingContracts"

    id = Column(Integer, primary_key=True)
    platform_id = Column(Integer, ForeignKey('Platforms.id'), nullable=False)
    contract_id = Column(Integer, ForeignKey('Contracts.id'), nullable=False)
    booking_id = Column(Integer, ForeignKey('Bookings.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    platforms = relationship('Platforms', backref='bookings_contracts')
    contracts = relationship('Contracts', backref='bookings_contracts')
    bookings = relationship('Bookings', backref='bookings_contracts')

# CREATE TABLE "PlatformsReviews" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "platform_id" int NOT NULL,
#   "tenant_id" int NOT NULL,
#   "review" varchar(255) NOT NULL,
#   "created_at" timestamp DEFAULT (now()),
#   "deleted" boolean DEFAULT false
# );
class PlatformsReviews(Base):
    __tablename__ = "PlatformsReviews"

    id = Column(Integer, primary_key=True)
    platform_id = Column(Integer, ForeignKey('Platforms.id'), nullable=False)
    tenant_id = Column(Integer, ForeignKey('TenantUsers.id'), nullable=False)
    review = Column(String(255), nullable=False)
    created_at = Column(DateTime, default=datetime.now())
    deleted = Column(Boolean, default=False)

    platforms = relationship('Platforms', backref='platforms_reviews')
    tenants = relationship('TenantUsers', backref='platforms_reviews')
